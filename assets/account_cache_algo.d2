
RawAccStatsFlow {
    deps: Dependencies {
        shape: class
        calcTrnDao: CalcTrnDao
        rawStatsFlow: RawStatsFlow
        accountsCacheDao: AccountCacheDao
    }

    in: Input {
        shape: class
        accountId: String
    }

    1: "Lookup for cache by `account_id`. Cache found?"
    1_true: "Cache found." {
        1: "Fetch ONLY the transactions after the cache time for the account." {
            fill: green
            font-color: white
        }
        2: "Execute RawStatsFlow only for the transactions after the cache." {
            fill: green
            font-color: white
        }
        3: "Sum the cached `RawStats` with the just calculated ones."
        4: "Update the cache." {
            shape: cylinder
            fill: blue
            font-color: white
        }
        5: "Return the summed `RawStats`"
        1 -> 2 -> 3 -> 4 -> 5
    }
    1_false: "Cache NOT found." {
      1: "Fetch ALL transactions for the account." {
        shape: cylinder
        fill: orange
        font-color: white
      }
      2: "Execute RawStasFlow for all of account's transactions." {
        fill: orange
        font-color: white
      }
      3: "Update the cache." {
        shape: cylinder
        fill: blue
        font-color: white
      }
      4: "Return the calculated `RawStats`"

      1 -> 2 -> 3 -> 4
    }

    out: RawStats {
        shape: class
        incomes: Map<CurrencyCode, Double>
        expenses: Map<CurrencyCode, Double>
        incomesCount: Int
        expensesCount: Int
    }

    in -> 1: accountId
    deps.accountsCacheDao -> 1: accountsCacheDao
    deps.calcTrnDao -> 1_false: calcTrnDao
    deps.rawStatsFlow -> 1_false: rawStatsFlow
    1 -> 1_true: True
    1 -> 1_false: False
    1_true.5 -> out: Cache (from DB)
    1_false.4 -> out: Processed (slow)
}

db.accounts_cache -> \
    RawAccStatsFlow.deps.accountsCacheDao: AccountsCacheDao

db: Database {
    shape: cylinder

    accounts_cache: {
        shape: sql_table
        
        account_id: String { constraint: primary_key }
        incomes_json: "JSON [{\"curr\":\"str\",\"amount\":0.0}]"
        expenses: "JSON [{\"curr\":\"str\",\"amount\":0.0}]"
        incomes_count: Int
        expenses_count: Int
    }
}

